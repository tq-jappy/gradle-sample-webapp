apply plugin: "java"
apply plugin: "maven"
apply plugin: "eclipse"
apply plugin: "war"
apply plugin: "jetty"
apply plugin: 'application'
// apply plugin: "checkstyle"
// apply plugin: "findbugs"
apply from: "flyway.gradle"

group = "jappy"
version = 1.0
sourceCompatibility = 1.7
mainClassName = "sample.Main"
applicationName = "app"

def defaultEncoding = 'UTF-8'
[
    compileJava,
    compileTestJava,
    javadoc
]*.options*.encoding = defaultEncoding

// [checkstyleMain, checkstyleTest]*.ignoreFailures = true
// [findbugsMain, findbugsTest]*.ignoreFailures = true

repositories {
    mavenLocal()
    maven { url "http://maven.seasar.org/maven2" }
    mavenCentral()
}

dependencies {
    compile "org.eclipse.jetty.orbit:javax.servlet:3.0.0.v201112011016@jar"
    compile("org.eclipse.jetty:jetty-server:8.1.9.v20130131") { exclude module: 'javax.servlet' }
    compile("org.eclipse.jetty:jetty-webapp:8.1.9.v20130131") { exclude module: 'javax.servlet' }
    compile 'commons-io:commons-io:1.4'
    [
        'core',
        'server',
        'servlet',
        'client',
        'json'
    ].each { compile "com.sun.jersey:jersey-$it:1.17.1" }
    testCompile 'junit:junit:4.10'
}

fileTree(dir: 'src/main/config', include: '**/*.properties').each { file ->
    def env = file.name.substring(0, file.name.lastIndexOf('.'))

    task("${env}War", type: War) {
        def props = new Properties()
        file.withInputStream { stream ->
            props.load(stream)
        }

        doFirst {
            copy {
                from("src/main/webapp")
                into "${buildDir}/additionalWebInf"
                expand(props)
            }
        }

        appendix props.warAppendix
        exclude('WEB-INF/web.xml')
        webInf { from("${buildDir}/additionalWebInf") }
    }
}

task stage(dependsOn: ['clean', 'installApp'])

[jettyRun, jettyRunWar]*.httpPort = 8090
[jettyRun, jettyRunWar]*.contextPath = 'sample'

// 既存の war タスクを上書き
// ただし、依存関係は自前
// 参考) http://wadahiro.hatenablog.com/entry/20120318/1332045900
task war(overwrite: true, dependsOn: ['classes']) << {
    println "start war."
    tasks.productionWar.execute()
    println "end war."
}
